/**
 * RIS::Boards
 * ## Info  * powered by [DB Reisendeninformation](https://db-planet.deutschebahn.com/pages/reisendeninformation/apps/content/willkommen) * member of the [RIS-API](https://db.de/ris-api) family, the building kit for traveller information * for details check out [RIS::Boards](https://api-portal.hub.db.de/db/apis/product/ris-boards) in the DB API Portal  ## Capabilities  Provides a list of transports [Verkehrsmittel] departing / arriving at a particular stop-place [Haltestelle] and optional all other stop places-belonging to the same stop-place group [vertrieblicher Umsteigebereich] within a specific time window:  * departures [Abfahrten] or arrivals [Ankünfte] (depending on board) with schedule [Soll] and forecast [Vorschau] times and platforms [Plattform / Gleis / Bussteig etc.] * disruptions [Störungen] for departure stop-place * information that are given for each transport are     * journey origin [Starthalt] and destination [Zielhalt]     * cancelled stops [Haltausfall], additional stops [Zusatzhalt], cancelled additional stops [zurückgenommene Zusatzhalte] additional textual information [Freitexte] and possible restrictions on       changing passengers [Fahrgastwechsel] and on demand stops [Bedarfshalte]     * references to other transports representing replacement [Ersatz], relief [Entlastung], travels with [Vereinigung] including separatation at [Trennung in] and continuation [Durchbindung]     * list of via stops including their display priorities [Via-Halte]     * disruptions [Störungen] for particular departure of journey     * information on replacement transports [SEV]     * journeys message [Freitexte / Verspätungsbegründung] and direction-texts [Richtungstexte]  ## Limitations / Known Issues  * journeys are limited to 22h ahead  ## Getting Started  * visit our [documentation](https://ris-api.gitpages.tech.rz.db.de), learn how to [get started with openapi](https://developer-docs.deutschebahn.com/doku/apis/openapi.html) or how   to [get started with asyncapi](https://developer-docs.deutschebahn.com/doku/apis/asyncapi.html) and check out our [coding-examples](https://developer-docs.deutschebahn.com/doku/apis) * bounty hunter, bug finder or just idea creator, we are thirsty to hear from you - get in touch with us by using [DB AnwenderEcho](https://anwenderecho.extranet.deutschebahn.com/ris-api/) or write   an [email](mailto:ris-api@deutschebahn.com)  ## Changelog  <details>  ### 1.5.1  #### Added  * added `journeyDescription` and `categoryInternal` to all transport-objects (`TransportPublic`)  ### 1.4.7  #### Changed  * fixed wrong length for `arrivalOrDepartureID`, `departureID` and `arrivalID` from `10` to `12`  </details> 
 *
 * OpenAPI spec version: 1.5.1.1
 * Contact: ris-fachbetrieb@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Administration } from '../models/Administration';
import { CodeShare } from '../models/CodeShare';
import { DisruptionCommunicationEmbeddedLegacy } from '../models/DisruptionCommunicationEmbeddedLegacy';
import { JourneyType } from '../models/JourneyType';
import { MessageAttributeLegacy } from '../models/MessageAttributeLegacy';
import { MessageLegacy } from '../models/MessageLegacy';
import { StopPlaceEmbedded } from '../models/StopPlaceEmbedded';
import { TimeType } from '../models/TimeType';
import { TransportPublicDestination } from '../models/TransportPublicDestination';
import { TransportPublicDestinationPortionWorking } from '../models/TransportPublicDestinationPortionWorking';
import { TransportPublicDestinationVia } from '../models/TransportPublicDestinationVia';
import { HttpFile } from '../http/http';

/**
* Departure [Abfahrt] information within departure boards.
*/
export class StopDeparture {
    /**
    * Indicates whether this departure is additional [Zusatzhalt], meaning not be part of the regular schedule.
    */
    'additional': boolean;
    'administration': Administration;
    /**
    * List of journey-attributes [Fahrtmerkmale / Sollmerkmale] for particular stop..
    */
    'attributes'?: Array<MessageAttributeLegacy>;
    /**
    * Indicates whether the departure has been canceled [Haltausfall].
    */
    'canceled': boolean;
    /**
    * List of codeshares [Code-Teilungen mit Flügen verschiedener Fluggesellschaften] for this particular journey at this arrival / departure.
    */
    'codeshares'?: Array<CodeShare>;
    'continuationBy'?: TransportPublicDestination;
    /**
    * ID of departure [AbfahrtID].
    */
    'departureID': string;
    /**
    * List of disruptions [Stoerungsinformationen] for particular stop.
    */
    'disruptions'?: Array<DisruptionCommunicationEmbeddedLegacy>;
    /**
    * Indicates whether there is at least one disruption in the future of this journey.
    */
    'futureDisruptions': boolean;
    /**
    * ID of journey [FahrtID].
    */
    'journeyID': string;
    'journeyType': JourneyType;
    /**
    * List of available messages to display for this departure.
    */
    'messages'?: Array<MessageLegacy>;
    /**
    * Indicates whether stop is an on demand stop [Bedarfshalt].
    */
    'onDemand': boolean;
    /**
    * Actual platform [Gleis, Bahnsteig, Plattform] the transport departs at.
    */
    'platform': string;
    /**
    * Scheduled platform [Gleis, Bahnsteig, Plattform] the transport departs at.
    */
    'platformSchedule'?: string;
    /**
    * List of transports this journey is reliefed by [Entlastungszug].
    */
    'reliefBy'?: Array<TransportPublicDestination>;
    /**
    * List of transports this journey reliefs for [Entlastungszug].
    */
    'reliefFor'?: Array<TransportPublicDestination>;
    /**
    * List of transports this journey is replaced by [Ersatzzug].
    */
    'replacedBy'?: Array<TransportPublicDestination>;
    /**
    * List of transports this journey replaces [Ersatzzug].
    */
    'replacementFor'?: Array<TransportPublicDestination>;
    'station': StopPlaceEmbedded;
    /**
    * Best known time information of stop as fully qualified date (for instance \'2019-08-19T12:56:14+02:00\' or \'2019-08-19T10:56:14Z\').
    */
    'time': Date;
    /**
    * Scheduled time [Abfahrtszeit Soll] of stop as fully qualified date (for instance \'2019-08-19T12:56:14+02:00\' or \'2019-08-19T10:56:14Z\').
    */
    'timeSchedule': Date;
    'timeType': TimeType;
    'transport': TransportPublicDestinationVia;
    /**
    * List of journeys this journey travels with [Vereinigung].
    */
    'travelsWith'?: Array<TransportPublicDestinationPortionWorking>;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "additional",
            "baseName": "additional",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "administration",
            "baseName": "administration",
            "type": "Administration",
            "format": ""
        },
        {
            "name": "attributes",
            "baseName": "attributes",
            "type": "Array<MessageAttributeLegacy>",
            "format": ""
        },
        {
            "name": "canceled",
            "baseName": "canceled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "codeshares",
            "baseName": "codeshares",
            "type": "Array<CodeShare>",
            "format": ""
        },
        {
            "name": "continuationBy",
            "baseName": "continuationBy",
            "type": "TransportPublicDestination",
            "format": ""
        },
        {
            "name": "departureID",
            "baseName": "departureID",
            "type": "string",
            "format": ""
        },
        {
            "name": "disruptions",
            "baseName": "disruptions",
            "type": "Array<DisruptionCommunicationEmbeddedLegacy>",
            "format": ""
        },
        {
            "name": "futureDisruptions",
            "baseName": "futureDisruptions",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "journeyID",
            "baseName": "journeyID",
            "type": "string",
            "format": ""
        },
        {
            "name": "journeyType",
            "baseName": "journeyType",
            "type": "JourneyType",
            "format": ""
        },
        {
            "name": "messages",
            "baseName": "messages",
            "type": "Array<MessageLegacy>",
            "format": ""
        },
        {
            "name": "onDemand",
            "baseName": "onDemand",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "platform",
            "baseName": "platform",
            "type": "string",
            "format": ""
        },
        {
            "name": "platformSchedule",
            "baseName": "platformSchedule",
            "type": "string",
            "format": ""
        },
        {
            "name": "reliefBy",
            "baseName": "reliefBy",
            "type": "Array<TransportPublicDestination>",
            "format": ""
        },
        {
            "name": "reliefFor",
            "baseName": "reliefFor",
            "type": "Array<TransportPublicDestination>",
            "format": ""
        },
        {
            "name": "replacedBy",
            "baseName": "replacedBy",
            "type": "Array<TransportPublicDestination>",
            "format": ""
        },
        {
            "name": "replacementFor",
            "baseName": "replacementFor",
            "type": "Array<TransportPublicDestination>",
            "format": ""
        },
        {
            "name": "station",
            "baseName": "station",
            "type": "StopPlaceEmbedded",
            "format": ""
        },
        {
            "name": "time",
            "baseName": "time",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "timeSchedule",
            "baseName": "timeSchedule",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "timeType",
            "baseName": "timeType",
            "type": "TimeType",
            "format": ""
        },
        {
            "name": "transport",
            "baseName": "transport",
            "type": "TransportPublicDestinationVia",
            "format": ""
        },
        {
            "name": "travelsWith",
            "baseName": "travelsWith",
            "type": "Array<TransportPublicDestinationPortionWorking>",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return StopDeparture.attributeTypeMap;
    }

    public constructor() {
    }
}


